// European
#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <cctype>
#include <vector>

using namespace std;

int generated_number;

const int payout_35 = 35;
const int payout_17 = 17;
const int payout_11 = 11;
const int payout_8 = 8;
const int payout_5 = 5;
const int payout_2 = 2;
const int payout_1 = 1;

//inside bets-probabilities 

//after doing it i realised that i don't need it to check wins
/*
const double straight_prob = 0.0263;
const double split_prob = 0.0526;
const double street_prob = 0.0811;
const double corner_prob = 0.1081;
const double six_line_prob = 0.1622;

//outside bets-robabilities
const double red_black_prob = 0.4865;
const double odd_even_prob = 0.4865;
const double high_low_prob = 0.4865;
const double dozen_prob = 0.3243;
const double column_prob =  0.3243;
*/



//outside bets-numbers
const int first_12[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
const int second_12[12] = {13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24};
const int third_12[12] = {25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36};
const int black[18] = {2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35};
const int red[18] = {1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36};
const int col_1[12] = {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34};
const int col_2[12] = {2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35};
const int col_3[12] = {3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36};
const string inside_bet_types[5] = {"straight", "split", "street", "corner", "six-line"};
const string outside_bet_types[8] = {"red", "black", "odd", "even", "high", "low", "dozen", "column"};

//numbers 1 to 18
//numbers 19 to 36
//even - any even number within range
//odd - any odd number within range
//dozen 

void prompt_bet(){
    cout << "Please Choose your type of bet: " << endl;
    cout << "_______________________________" << endl;
    cout << endl << "Inside: " << endl;

    for(int i = 0; i < 5; i++){
        cout << inside_bet_types[i] << endl;
    }

    cout << endl << "Outside: " <<endl;
    for(int i = 0; i < 8; i++){
        cout << outside_bet_types[i] << endl;
    }
}

bool generate_number_check_bet(int player_number1, string type, string sub_type, int player_number2=-1, int player_number3=-1, int player_number4=-1, int player_number5=-1, int player_number6=-1,int dozen=-1, int column=-1){
    bool win=false;
    generated_number = rand() % 36 + 1;//global variable
    if(type=="inside"){
        //straight bet
        if(sub_type==inside_bet_types[0])
            win = (generated_number==player_number1);
        //split bet
        else if(sub_type==inside_bet_types[1])
            win = (generated_number==player_number1 || generated_number==player_number2);
        //street bet
        else if(sub_type==inside_bet_types[2])
            win = (generated_number==player_number1 || generated_number==player_number2 || generated_number==player_number3);
        //corner bet
        else if(sub_type==inside_bet_types[3]){
            win = (generated_number==player_number1 || generated_number==player_number2 || generated_number==player_number3 || generated_number==player_number4);
        }
        //six-line-bet
        else if(sub_type==inside_bet_types[4]){
            win = (generated_number==player_number1 || generated_number==player_number2 || generated_number==player_number3 || generated_number==player_number4 || generated_number==player_number5 || generated_number==player_number6);
        }
    }
    else{//outside bets
        if(sub_type==outside_bet_types[0]){//red-bet
            for(int i=0; i<18; i++){ //yes i love for loops!
                if(generated_number == red[i])
                    win=true;
            }
        }
        else if(sub_type==outside_bet_types[1]){//black-bet
            for(int i=0; i<18; i++){
                if(generated_number == black[i])
                    win=true;
            }
        }
        else if(sub_type==outside_bet_types[2]){//odd-bet
            win = (generated_number%2!=0);
        }
        else if(sub_type==outside_bet_types[3]){//even-bet
            win = (generated_number%2==0);
        }
        else if(sub_type==outside_bet_types[4]){//high-bet
            win = (generated_number >= 19 && generated_number <=36);
        }
        else if(sub_type==outside_bet_types[5]){//low-bet
            win = (generated_number >= 1 && generated_number <=18);
        }
        else if(sub_type==outside_bet_types[6]){//dozen-bet
            if(dozen==1){
                win = (generated_number >= 1 && generated_number <=12);
            }
            else if(dozen==2){
                win = (generated_number >= 13 && generated_number <=24);
            }
            else if(dozen==3){
                win = (generated_number >= 25 && generated_number <=36);
            }
        }
        else if(sub_type==outside_bet_types[7]){//column-bet
            if(column==1){
                for(int i=0; i<13; i++){
                    if(generated_number==col_1[i]){
                        win=true;
                        break;
                    }
                }
            }
            else if(column==2){
                for(int i=0; i<13; i++){
                    if(generated_number==col_2[i]){
                        win=true;
                        break;
                    }
                }
            }
            else if(column==3){
                for(int i=0; i<13; i++){
                    if(generated_number==col_3[i]){
                        win=true;
                        break;
                    }
                }
            }
        }
    }
    return win;
}

vector<string> check_validity(){
    
    vector<string> types(2);
    string type, sub_type;

    cout << "Enter bet type (INSIDE/OUTSIDE)" << endl;
    cin >> type;

        while(type!="inside" && type!="outside"){
            cout << "Enter valid bet type (INSIDE/OUTSIDE)" << endl;
            cin >> type;
        }
    

        if(type == "inside"){
            cout << "Enter bet sub-type (split | street | corner | six-line | straight)" << endl;
            cin >>sub_type;
            while(sub_type != "straight" && sub_type != "split" && sub_type != "street" &&
                  sub_type != "corner" && sub_type != "six-line"){
                cout << "Re-Enter bet sub-type (split | street | corner | six-line | straight)" << endl;
                cin >> sub_type;
            }
        }

        if(type == "outside"){
            cout << "Enter bet sub-type (column | dozen | low | high | odd | even | red | black)" << endl;
            cin >>sub_type;
            while(sub_type != "red" && sub_type != "black" && sub_type != "odd" &&
                  sub_type != "even" && sub_type != "high" && sub_type != "low" &&
                  sub_type != "dozen" && sub_type != "column"){
                cout << "Re-Enter bet sub-type (column | dozen | low | high | odd | even | red | black)" << endl;
                cin >>sub_type;
            }
        }
    types[0] = type;
    types[1] = sub_type;
    return types;
}

void play(){
    char play_again = 'y';
    cout << "Enter (y/n) to play/stop" << endl;
    cin >> play_again;
    while(play_again=='y'){

    
        string type, sub_type;
        int player_number1=-1, player_number2=-1,player_number3=-1,player_number4=-1,player_number5=-1, player_number6=-1;
        vector<string> types = check_validity();
        type = types[0];
        sub_type = types[1];



        if(type=="inside"){
            cout << "Enter the number(s) for your bet: ";
            cin >> player_number1;
            if(sub_type == "split" || sub_type == "street" || sub_type == "corner" || sub_type == "six-line"){
                cout << "2nd Number: ";
                cin >> player_number2;
            }
            if(sub_type == "street" || sub_type == "corner" || sub_type== "six-line"){
                cout << "3rd Number: ";
                cin >> player_number3;
            }
            if(sub_type == "corner" || sub_type == "six-line"){
                cout << "4th Number: ";
                cin >> player_number4;
            }
            if(sub_type == "six-line"){
                cout << "5th, 6th Number: ";
                cin >> player_number5 >> player_number6;
            }
        }
        else{
            cout << "Please enter a valid bet." << endl;
            cout << "Enter bet type (INSIDE/OUTSIDE)" << endl;
            cin >> type;

            cout << "Enter bet sub-type (split | street | corner | six-line | straight _______ column | dozen | low | high | odd | even | red | black)" << endl;
            cin >>sub_type;
        }
        bool win = generate_number_check_bet(player_number1, type, sub_type, player_number2, player_number3, player_number4, player_number5, player_number6);
        if(win)
            cout << "WINNER!!!!!   WINNER!!!!!   CHICKEN!!!!!    DINNER!!!!!" << endl;
        else{
            cout << "LOSER WOMP WOMP :(" << endl;
            cout << "Bet: " << generated_number << endl;
        }
        cout << "Do you want to play again? (y/n)";
        cin >> play_again;
    }
}


int main(){

    prompt_bet();
    play();
return 0;
}
