import pygame
#move around game

pygame.init()

# screen
SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Bot game")

#bot-coordinates
bot_x = 500
bot_y = 400

#bot-dimensions
bot_w = 25
bot_h = 25

#bot-speed
bot_speed = 1

#colors
bg_color = (0, 0, 255)
black_color = (0, 0, 0)
bot_color = (255, 50, 50)
maze_bg_color = (0, 0, 255)
maze_path_color = (255, 255, 255)

#maze
CELL_SIZE = 50

#maze 2D array generated by chatGPT
maze = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]
#maze 2D array generated by chatGPT

def draw_maze(maze):
    for row_index, row in enumerate(maze):
        for col_index, cell in enumerate(row):
            if cell == 1:
                maze_color = maze_bg_color
            else:
                maze_color = maze_path_color
            pygame.draw.rect(screen, maze_color, (col_index * CELL_SIZE, row_index * CELL_SIZE, CELL_SIZE, CELL_SIZE))


def move_bot():
    global bot_x, bot_y
    keys = pygame.key.get_pressed()

    reset_x = bot_x
    reset_y = bot_y

    if keys[pygame.K_LEFT]:
        reset_x -= bot_speed
    if keys[pygame.K_RIGHT]:
        reset_x += bot_speed
    if keys[pygame.K_UP]:
        reset_y -= bot_speed
    if keys[pygame.K_DOWN]:
        reset_y += bot_speed

    if not is_collision(reset_x, reset_y):
        # if their is a collision then reset position to be position before collision
        bot_x = reset_x
        bot_y = reset_y

    #pygame.draw.rect(screen, bot_color, (bot_x, bot_y, bot_w, bot_h))

def is_collision(bot_x, bot_y):
    row = bot_y // CELL_SIZE # find indicies of maze corresponding to bot coordinates
    col = bot_x // CELL_SIZE
    if maze[row][col] == 1: # if value at inde == 1 then is a wall
        return True
    return False

def event_handler():
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

while True:
    event_handler()
    move_bot()

    #screen.fill(black_color)
    draw_maze(maze)

    pygame.draw.rect(screen, bot_color, (bot_x, bot_y, bot_w, bot_h))
    pygame.display.flip()
