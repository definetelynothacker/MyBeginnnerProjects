import tkinter as tk


window = tk.Tk()
window.title("Calculator")
window.geometry('700x700')
window.resizable(False, False)

calculator_screen = tk.Entry(window, width=40)
calculator_screen.grid(row=0, column=2, padx=5, pady=5)

def removeSpaces(string: str):
    return string.replace(" ", "")


################################################
################################################
################################################
#parse_expression function is taken from chatgpt
def parse_expression(string: str):
    new_list = []
    num_str = ""

    for char in string:
        if char.isdigit() or char == '.':
            num_str += char
        else:
            if num_str:
                new_list.append(num_str)  # Append the collected number string
                num_str = ""  # Reset the number string
            if char.strip():  # Add non-empty operators
                new_list.append(char)
    
    # Append the last collected number string if any
    if num_str:
        new_list.append(num_str)

    return new_list
#parse_expression function is taken from chatgpt
################################################
################################################
################################################


def calculate(string: str): 
    total = 0
    sum = 0
    #type is a list
    #numbers and operations are added to list
    expression = parse_expression(string)
    expression_new = []
    # first pass for multiplication/division
    for i in range(len(expression)): 
        if expression[i] == '×' or expression[i] == '*':    #or option only included so I can test it, ei i don't want to type the actual symbols instead just using * or /
            total = float(expression[i-1]) * float(expression[i+1])
            expression[i] = ""
            expression[i-1] = ""
            expression[i+1] = total
        elif expression[i] == '÷' or expression[i] == '/':  #or option only included so I can test it, ei i don't want to type the actual symbols instead just using * or /
            total = float(expression[i-1]) / float(expression[i+1])
            expression[i] = ""
            expression[i-1] = ""
            expression[i+1] = total

    #remove empty characters
    for i in range(len(expression)):
        if expression[i] != "":
            expression_new.append(expression[i])
    print(f"New Expression: {expression_new}")

    #second pass for addition/subtraction
    for i in range(len(expression_new)): 
        if expression_new[i] == '+':
            total = float(expression_new[i-1]) + float(expression_new[i+1])
            expression_new[i] = ""
            expression_new[i-1] = ""
            expression_new[i+1] = total
        elif expression_new[i] == '-':
            total = float(expression_new[i-1]) - float(expression_new[i+1])
            expression_new[i] = ""
            expression_new[i-1] = ""
            expression_new[i+1] = total
    clear_screen()
    calculator_screen.insert(tk.END, str(total))


def button_numbers(character: str):
    calculator_screen.insert(tk.END, character)

def clear_screen():
    calculator_screen.delete(0, tk.END)

def button_signs(character: str):
    if character == "AC" or character == "C":
        calculator_screen.delete(0, tk.END)
    else:
        calculator_screen.insert(tk.END, character)



# row 1
button_hyp = tk.Button(window, text="hyp", width=4, command=lambda: button_signs("hyp"))
button_hyp.grid(row=1, column=0, padx=5, pady=5)

button_hyp = tk.Button(window, text="sin", width=4, command=lambda: button_signs("sin"))
button_hyp.grid(row=1, column=1, padx=5, pady=5)

button_hyp = tk.Button(window, text="cos", width=4, command=lambda: button_signs("cos"))
button_hyp.grid(row=1, column=2, padx=5, pady=5)

button_hyp = tk.Button(window, text="tan", width=4, command=lambda: button_signs("tan"))
button_hyp.grid(row=1, column=3, padx=5, pady=5)

button_hyp = tk.Button(window, text="∫dx", width=4, command=lambda: button_signs("∫dx"))
button_hyp.grid(row=1, column=4, padx=5, pady=5)

button_hyp = tk.Button(window, text="MATH", width=4, command=lambda: button_signs("MATH"))
button_hyp.grid(row=1, column=5, padx=5, pady=5)
# row 1



# row 2
button_PI = tk.Button(window, text="π", width=4, command=lambda: button_signs("π"))
button_PI.grid(row=2, column=0, padx=5, pady=5)

button_POW = tk.Button(window, text="yˣ", width=4, command=lambda: button_signs("yˣ"))
button_POW.grid(row=2, column=1, padx=5, pady=5)

button_SQR = tk.Button(window, text="x²", width=4, command=lambda: button_signs("x²"))
button_SQR.grid(row=2, column=2, padx=5, pady=5)

button_CUB = tk.Button(window, text="x³", width=4, command=lambda: button_signs("x³"))
button_CUB.grid(row=2, column=3, padx=5, pady=5)

button_LOG = tk.Button(window, text="log", width=4, command=lambda: button_signs("log"))
button_LOG.grid(row=2, column=4, padx=5, pady=5)

button_LN = tk.Button(window, text="ln", width=4, command=lambda: button_signs("ln"))
button_LN.grid(row=2, column=5, padx=5, pady=5)
# row 2



# row 3
button_Exp = tk.Button(window, text="Exp", width=4, command=lambda: button_signs("Exp"))
button_Exp.grid(row=3, column=0, padx=5, pady=5)

button_ABC = tk.Button(window, text="A b/c", width=4, command=lambda: button_signs("A b/c"))
button_ABC.grid(row=3, column=1, padx=5, pady=5)

button_DMS = tk.Button(window, text="D'M'S", width=4, command=lambda: button_signs("D'M'S"))
button_DMS.grid(row=3, column=2, padx=5, pady=5)

button_RCL = tk.Button(window, text="RCL", width=4, command=lambda: button_signs("RCL"))
button_RCL.grid(row=3, column=3, padx=5, pady=5)

button_STO = tk.Button(window, text="STO", width=4, command=lambda: button_signs("STO"))
button_STO.grid(row=3, column=4, padx=5, pady=5)

button_Mplus = tk.Button(window, text="M+", width=4, command=lambda: button_signs("M+"))
button_Mplus.grid(row=3, column=5, padx=5, pady=5)
# row 3



# row 4
button7 = tk.Button(window, text="7", width=5, command=lambda: button_numbers("7"))
button7.grid(row=4, column=0, padx=5, pady=5)

button8 = tk.Button(window, text="8", width=5, command=lambda: button_numbers("8"))
button8.grid(row=4, column=1, padx=5, pady=10)

button9 = tk.Button(window, text="9", width=5, command=lambda: button_numbers("9"))
button9.grid(row=4, column=2, padx=5, pady=5)

button_OBRAC = tk.Button(window, text="(", width=5, command=lambda: button_signs("("))
button_OBRAC.grid(row=4, column=3, padx=5, pady=5)

button_CBRAC = tk.Button(window, text=")", width=5, command=lambda: button_signs(")"))
button_CBRAC.grid(row=4, column=4, padx=5, pady=5)
# row 4



# row 5
button4 = tk.Button(window, text="4", width=5, command=lambda: button_numbers("4"))
button4.grid(row=5, column=0, padx=5, pady=5)

button5 = tk.Button(window, text="5", width=5, command=lambda: button_numbers("5"))
button5.grid(row=5, column=1, padx=5, pady=5)

button6 = tk.Button(window, text="6", width=5, command=lambda: button_numbers("6"))
button6.grid(row=5, column=2, padx=5, pady=5)

button_mul = tk.Button(window, text="×", width=5, command=lambda: button_signs("×"))
button_mul.grid(row=5, column=3, padx=5, pady=5)

button_div = tk.Button(window, text="÷", width=5, command=lambda: button_signs("÷"))
button_div.grid(row=5, column=4, padx=5, pady=5)
# row 5



# row 6
button1 = tk.Button(window, text="1", width=5, command=lambda: button_numbers("1"))
button1.grid(row=6, column=0, padx=5, pady=5)

button_2 = tk.Button(window, text="2", width=5, command=lambda: button_numbers("2"))
button_2.grid(row=6, column=1, padx=5, pady=5)

button_3 = tk.Button(window, text="3", width=5, command=lambda: button_numbers("3"))
button_3.grid(row=6, column=2, padx=5, pady=5)

button_plus = tk.Button(window, text="+", width=5, command=lambda: button_signs("+"))
button_plus.grid(row=6, column=3, padx=5, pady=5)

button_minus = tk.Button(window, text="-", width=5, command=lambda: button_signs("+"))
button_minus.grid(row=6, column=4, padx=5, pady=5)
# row 6



# row 7
button_zero = tk.Button(window, text="0", width=5, command=lambda: button_signs("0"))
button_zero.grid(row=7, column=0, padx=5, pady=5)

button_period = tk.Button(window, text=".", width=5, command=lambda: button_signs("."))
button_period.grid(row=7, column=1, padx=5, pady=5)

button_PorM = tk.Button(window, text="±", width=5, command=lambda: button_signs("±"))
button_PorM.grid(row=7, column=2, padx=5, pady=5)

button_equal = tk.Button(window, text="=", width=10, command=lambda: calculate(calculator_screen.get()))
button_equal.grid(row=7, column=3, padx=5, pady=5)
# row 7

for i in range(8):
    window.grid_columnconfigure(i, weight=1)


window.mainloop()
